name: Flutter Test

on:
  workflow_call:
    inputs:
      analyze_directories:
        required: false
        type: string
        default: "lib test"
      flutter_channel:
        required: false
        type: string
        default: "stable"
      flutter_version:
        required: false
        type: string
        default: ""
      format_directories:
        required: false
        type: string
        default: "lib test"
      format_line_length:
        required: false
        type: string
        default: "80"
      runs_on:
        required: false
        type: string
        default: "ubuntu-latest"
      working_directory:
        required: false
        type: string
        default: "."
    secrets:
      dot_env:
        required: false

jobs:
  deveji-flutter-test:
    defaults:
      run:
        working-directory: ${{inputs.working_directory}}
    outputs:
      format_result: ${{ steps.format.outputs.CHECK_FORMAT }}
      analyze_result: ${{ steps.analyze.outputs.CHECK_ANALYZE }}
      test_result: ${{ steps.test.outputs.CHECK_TEST }}
      

    runs-on: ${{inputs.runs_on}}

    steps:
      - name: üìö Git Checkout
        uses: actions/checkout@v4.1.6

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2.16.0
        with:
          flutter-version: ${{inputs.flutter_version}}
          channel: ${{inputs.flutter_channel}}
          cache: true
          cache-key: flutter-:os:-:channel:-:version:-:arch:-:hash:-${{ hashFiles('**/pubspec.lock') }}

      - name: üìù Add .env file
        run: echo "${{ secrets.dot_env }}" > .env

      - name: üì¶ Install Dependencies
        run: |
          flutter clean
          flutter pub get
          dart pub global activate build_runner
          dart run build_runner build -d

      - name: ‚ú® Check Formatting
        id: format
        run: |
          dart format --line-length ${{inputs.format_line_length}} --set-exit-if-changed ${{inputs.format_directories}}
          echo "test format"
          check=$?
          echo "CHECK_FORMAT=$check" >> $GITHUB_ENV
          echo "CHECK_FORMAT=$check" >> $GITHUB_OUTPUT
          exit $check
        continue-on-error: true

      - name: üïµÔ∏è Analyze
        id: analyze
        run: |
          flutter analyze ${{inputs.analyze_directories}}
          echo "test analyze"
          check=$?
          echo "CHECK_ANALYZE=$check" >> $GITHUB_ENV
          echo "CHECK_ANALYZE=$check" >> $GITHUB_OUTPUT
          exit $check
        continue-on-error: true

      - name: üß™ Run Tests
        id: test
        run: | 
          flutter test --test-randomize-ordering-seed random
          echo "test test"
          check=$?
          echo "CHECK_TEST=$check" >> $GITHUB_ENV
          echo "CHECK_TEST=$check" >> $GITHUB_OUTPUT
          exit $check
        continue-on-error: true
      
      - name: üöÄ Results
        run: |
          echo "### üìù Check Formatting: $CHECK_FORMAT"
          echo "### üïµÔ∏è Analyze: $CHECK_ANALYZE"
          echo "### üß™ Test: $CHECK_TEST"
          if [[ "$CHECK_FORMAT" != "0" ]]; then
            echo "### ‚ùå Formatting check failed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚úÖ Formatting check passed!" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "$CHECK_ANALYZE" != "0" ]]; then
            echo "### ‚ùå Analyze check failed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚úÖ Analyze check passed!" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "$CHECK_TEST" != "0" ]]; then
            echo "### ‚ùå Test check failed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚úÖ Test check passed!" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "$CHECK_FORMAT" == "0" ]] && [[ "$CHECK_ANALYZE" == "0" ]] && [[ "$CHECK_TEST" == "0" ]]; then
            echo "### üéâ All checks passed! :rocket:" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

      - name: üèÅ Exit
        env:
          OUTPUT_CHECK_FORMAT: ${{ steps.format.outputs.CHECK_FORMAT }}
          OUTPUT_CHECK_ANALYZE: ${{ steps.analyze.outputs.CHECK_ANALYZE }}
          OUTPUT_CHECK_TEST: ${{ steps.test.outputs.CHECK_TEST }}
        run: |
          echo "Test results: $OUTPUT_CHECK_TEST"
          echo "Format results: $OUTPUT_CHECK_FORMAT"
          echo "Analyze results: $OUTPUT_CHECK_ANALYZE"
          exit $CHECK_TEST