name: Flutter Test

on:
  workflow_call:
    inputs:
      analyze_directories:
        required: false
        type: string
        default: "lib test"
      concurrency:
        required: false
        type: number
        default: 4
      coverage_excludes:
        required: false
        type: string
        default: ""
      flutter_channel:
        required: false
        type: string
        default: "stable"
      flutter_version:
        required: false
        type: string
        default: ""
      format_directories:
        required: false
        type: string
        default: "lib test"
      format_line_length:
        required: false
        type: string
        default: "80"
      min_pana_score:
        required: false
        type: number
        default: 80
      runs_on:
        required: false
        type: string
        default: "ubuntu-latest"
      setup:
        required: false
        type: string
        default: ""
      test_optimization:
        required: false
        type: boolean
        default: true
      test_recursion:
        required: false
        type: boolean
        default: false
      working_directory:
        required: false
        type: string
        default: "."
      package_get_excludes:
        required: false
        type: string
        default: "!*"
    secrets:
      ssh_key:
        required: false
      dot_env:
        required: false

jobs:
  test:
    defaults:
      run:
        working-directory: ${{inputs.working_directory}}

    runs-on: ${{inputs.runs_on}}

    # continue-on-error: true

    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{inputs.flutter_version}}
          channel: ${{inputs.flutter_channel}}
          cache: true
          cache-key: flutter-:os:-:channel:-:version:-:arch:-:hash:-${{ hashFiles('**/pubspec.lock') }}

      - name: 🚀 Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'        

      - name: 🤫 Set SSH Key
        env:
          ssh_key: ${{secrets.ssh_key}}
        if: env.ssh_key != null
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{secrets.ssh_key}}

      - name: 📝 Add .env file
        run: echo "${{secrets.dot_env }}" > .env

      # - name: 🤖 Setup Git Config
      #   run: |
      #     git config --global user.email "github-bot@deveji.com"
      #     git config --global user.name "Deveji Bot"

      - name: 📦 Install Dependencies
        run: |
          flutter clean && dart run build_runner build -d && flutter pub get


      - name: ⚙️ Run Setup
        if: "${{inputs.setup != ''}}"
        run: ${{inputs.setup}}

      - name: ✨ Check Formatting
        run: dart format --line-length ${{inputs.format_line_length}} --set-exit-if-changed ${{inputs.format_directories}}
        continue-on-error: true

      - name: 🕵️ Analyze
        run: flutter analyze ${{inputs.analyze_directories}}
        continue-on-error: true

      - name: 🧪 Run Tests
        run: flutter test --test-randomize-ordering-seed random

      - name: 📦 Install Pana
        run: flutter pub global activate pana

      - name: 📊 Verify Pana Score
        run: |
          PANA=$(pana . --no-warning); PANA_SCORE=$(echo $PANA | sed -n "s/.*Points: \([0-9]*\)\/\([0-9]*\)./\1\/\2/p")
          echo "Score: $PANA_SCORE"
          IFS='/'; read -a SCORE_ARR <<< "$PANA_SCORE"; SCORE=SCORE_ARR[0];
          if (( $SCORE < ${{inputs.min_pana_score}} )); then echo "The minimum score of ${{inputs.min_pana_score}} was not met!"; exit 1; fi


